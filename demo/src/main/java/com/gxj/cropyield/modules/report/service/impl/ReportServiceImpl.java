package com.gxj.cropyield.modules.report.service.impl;

import com.gxj.cropyield.common.exception.BusinessException;
import com.gxj.cropyield.common.response.ResultCode;
import com.gxj.cropyield.modules.forecast.entity.ForecastResult;
import com.gxj.cropyield.modules.forecast.repository.ForecastResultRepository;
import com.gxj.cropyield.modules.report.dto.ReportMetrics;
import com.gxj.cropyield.modules.report.dto.ReportOverviewResponse;
import com.gxj.cropyield.modules.report.dto.ReportRequest;
import com.gxj.cropyield.modules.report.dto.ReportSummaryResponse;
import com.gxj.cropyield.modules.report.entity.Report;
import com.gxj.cropyield.modules.report.repository.ReportRepository;
import com.gxj.cropyield.modules.report.service.ReportService;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;
import org.springframework.data.domain.Sort;

import java.util.List;
import java.time.LocalDateTime;
import java.time.YearMonth;
import java.util.stream.Collectors;

@Service
public class ReportServiceImpl implements ReportService {

    private final ReportRepository reportRepository;
    private final ForecastResultRepository forecastResultRepository;

    public ReportServiceImpl(ReportRepository reportRepository,
                             ForecastResultRepository forecastResultRepository) {
        this.reportRepository = reportRepository;
        this.forecastResultRepository = forecastResultRepository;
    }

    @Override
    public ReportOverviewResponse getOverview() {
        List<Report> reports = reportRepository.findAll(Sort.by(Sort.Direction.DESC, "publishedAt", "createdAt"));
        List<ReportSummaryResponse> summaries = reports.stream()
            .map(this::toSummary)
            .collect(Collectors.toList());

        YearMonth currentMonth = YearMonth.now();
        long publishedThisMonth = reports.stream()
            .filter(report -> report.getPublishedAt() != null)
            .filter(report -> YearMonth.from(report.getPublishedAt()).equals(currentMonth))
            .filter(report -> "PUBLISHED".equalsIgnoreCase(report.getStatus()))
            .count();

        long pendingApproval = reports.stream()
            .filter(report -> "PENDING".equalsIgnoreCase(report.getStatus()))
            .count();

        boolean autoGenerationEnabled = reports.stream().anyMatch(Report::isAutoGenerated);

        return new ReportOverviewResponse(
            summaries,
            new ReportMetrics(reports.size(), publishedThisMonth, pendingApproval, autoGenerationEnabled)
        );
    }

    @Override
    @Transactional
    public Report create(ReportRequest request) {
        ForecastResult result = forecastResultRepository.findById(request.forecastResultId())
            .orElseThrow(() -> new BusinessException(ResultCode.NOT_FOUND, "预测结果不存在"));

        Report report = new Report();
        report.setTitle(request.title());
        report.setDescription(request.description());
        report.setAuthor(StringUtils.hasText(request.author()) ? request.author().trim() : "系统自动");
        report.setCoveragePeriod(StringUtils.hasText(request.coveragePeriod()) ? request.coveragePeriod().trim() : null);
        report.setForecastResult(result);
        report.setInsights(request.insights());
        report.setStatus(StringUtils.hasText(request.status()) ? request.status().trim() : "PUBLISHED");
        report.setPublishedAt(request.publishedAt() != null ? request.publishedAt() : LocalDateTime.now());
        report.setAutoGenerated(Boolean.TRUE.equals(request.autoGenerated()));
        return reportRepository.save(report);
    }

    private ReportSummaryResponse toSummary(Report report) {
        return new ReportSummaryResponse(
            report.getId(),
            report.getTitle(),
            report.getDescription(),
            report.getAuthor(),
            report.getCoveragePeriod(),
            report.getStatus(),
            report.isAutoGenerated(),
            report.getPublishedAt(),
            report.getInsights()
        );
    }
}
